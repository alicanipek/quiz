{"version":3,"sources":["components/UserContext.tsx","views/Configuration.tsx","components/QuestionOption.tsx","views/Quiz.tsx","App.tsx","index.tsx"],"names":["UserContext","React","createContext","undefined","UserContextProvider","children","useState","name","setName","Provider","value","user","setUser","s","useUser","useContext","Configuration","history","useHistory","categories","setCategories","useForm","register","handleSubmit","errors","url","onSubmit","amount","category","difficulty","type","push","a","fetch","response","json","data","trivia_categories","fetchData","className","ref","required","max","clsx","onChange","e","target","map","key","id","QuestionOption","text","selected","isTrue","onClick","he","decode","defaultStyle","transition","opacity","transitionStyles","Quiz","location","useLocation","questions","setQuestions","answers","setAnswers","questionIndex","setQuestionIndex","isFinish","setIsFinish","show","setShow","direction","setDirection","time","setTime","handleClick","dir","length","useEffect","timerId","setTimeout","alert","question","correct_answer","filter","x","includes","clearTimeout","search","results","forEach","result","options","incorrect_answers","concat","sort","Math","random","handleOptionClick","slice","currentTarget","innerText","questionOnPage","index","Fragment","option","i","Transition","in","timeout","onExited","state","style","answer","App","exact","path","to","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6a074e16.chunk.js","sourcesContent":["import React, { ReactNode } from 'react';\n\ntype UserContextProps = {\n    user: string;\n    setUser: (n: string) => void;\n};\n\nexport const UserContext = React.createContext<UserContextProps | undefined>(\n    undefined,\n);\n\nexport default function UserContextProvider({\n    children,\n}: {\n    children: ReactNode;\n}) {\n    const [name, setName] = React.useState('');\n    const setNameFunc = (s: string) => {\n        setName(s);\n    };\n    return (\n        <UserContext.Provider value={{ user: name, setUser: setNameFunc }}>\n            {children}\n        </UserContext.Provider>\n    );\n}\nexport const useUser = () => React.useContext(UserContext);\n","import * as React from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useHistory } from 'react-router-dom';\nimport clsx from 'clsx';\nimport { useUser } from '../components/UserContext';\n\ntype FormData = {\n    amount: string;\n    category: string;\n    difficulty: string;\n    type: string;\n};\n\ntype Category = {\n    id: number;\n    name: 'string';\n};\n\ntype Response = {\n    trivia_categories: Category[];\n};\nexport default function Configuration() {\n    const { user, setUser } = useUser()!;\n    let history = useHistory();\n    const [categories, setCategories] = React.useState<Category[]>([]);\n    const { register, handleSubmit, errors } = useForm<FormData>();\n    let url = '/quiz?amount=';\n    const onSubmit = handleSubmit(({ amount, category, difficulty, type }) => {\n        url += amount;\n        url += category !== 'any' ? '&category=' + category : '';\n        url += difficulty !== 'any' ? '&difficulty=' + difficulty : '';\n        url += type !== 'any' ? '&type=' + type : '';\n        history.push(url);\n    });\n    React.useEffect(() => {\n        const fetchData = async () => {\n            const response = await fetch(\n                'https://opentdb.com/api_category.php',\n            );\n            const data: Response = await response.json();\n            setCategories(data.trivia_categories);\n        };\n        fetchData();\n    }, []);\n    return (\n        <div className='flex flex-col min-h-screen justify-center md:w-1/2 mx-auto px-2'>\n            <div className='py-5 text-center'>Quiz App</div>\n            <form className='grid grid-cols-1 row-gap-3' onSubmit={onSubmit}>\n                <label>Your Name</label>\n                <input\n                    name='name'\n                    ref={register({ required: true, max: 50 })}\n                    type='text'\n                    className={clsx(\n                        'border border-black border-solid px-3 py-4 h-12 rounded-md text-base',\n                        errors.amount &&\n                            'border-red-300 focus:border-red-600 focus:shadow-outline-red',\n                    )}\n                    value={user}\n                    onChange={(e) => setUser(e.target.value)}\n                />\n                <label>Number of Questions</label>\n                <input\n                    name='amount'\n                    ref={register({ required: true, max: 50 })}\n                    type='number'\n                    className={clsx(\n                        'border border-black border-solid px-3 py-4 h-12 rounded-md text-base',\n                        errors.amount &&\n                            'border-red-300 focus:border-red-600 focus:shadow-outline-red',\n                    )}\n                />\n                <label>Category</label>\n                <select\n                    name='category'\n                    className='border border-black border-solid px-3 py-2 h-12 rounded-md text-base'\n                    ref={register}\n                >\n                    <option value='any'>Any Category</option>\n                    {categories.map((category) => (\n                        <option key={category.id} value={category.id}>\n                            {category.name}\n                        </option>\n                    ))}\n                </select>\n                <label>Difficulty</label>\n                <select\n                    name='difficulty'\n                    className='border border-black border-solid px-3 py-2 h-12 rounded-md text-base'\n                    ref={register}\n                >\n                    <option value='any'>Any Difficulty</option>\n                    <option value='easy'>Easy</option>\n                    <option value='medium'>Medium</option>\n                    <option value='hard'>Hard</option>\n                </select>\n                <label>Type</label>\n                <select\n                    name='type'\n                    className='border border-black border-solid px-3 py-2 h-12 rounded-md text-base'\n                    ref={register}\n                >\n                    <option value='any'>Any Type</option>\n                    <option value='multiple'>Multiple Choice</option>\n                    <option value='boolean'>True / False</option>\n                </select>\n                <button\n                    type='submit'\n                    className='bg-indigo-600 hover:bg-indigo-500 focus:shadow-outline-indigo focus:border-indigo-700 active:bg-indigo-700 py-2 h-12 rounded-md text-white'\n                >\n                    Start\n                </button>\n            </form>\n        </div>\n    );\n}\n","import React, { ReactElement } from 'react';\nimport clsx from 'clsx';\nimport he from 'he';\n\ninterface Props {\n    text: string;\n    selected: boolean;\n    isTrue: boolean;\n    onClick: (event: React.MouseEvent<HTMLElement, MouseEvent>) => void;\n}\n\nexport default function QuestionOption({\n    text,\n    selected,\n    isTrue,\n    onClick,\n}: Props): ReactElement {\n    return (\n        <button\n            onClick={onClick}\n            className={clsx(\n                `flex-1 flex-grow text-left bg-gray-300 rounded-md my-1 ${\n                    !selected && !isTrue && 'hover:bg-gray-200'\n                } py-3 pl-6`,\n                isTrue && selected && 'bg-green-300',\n                isTrue && !selected && 'bg-red-300',\n                !isTrue && selected && 'bg-blue-300',\n            )}\n        >\n            <span>{he.decode(text)}</span>\n        </button>\n    );\n}\n","import React, { useEffect, useState } from 'react';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport { Transition } from 'react-transition-group';\nimport { TransitionStatus } from 'react-transition-group/Transition';\nimport QuestionOption from '../components/QuestionOption';\nimport he from 'he';\nimport { useUser } from '../components/UserContext';\n\nconst duration = 200;\n\nconst defaultStyle = {\n    transition: `opacity ${duration}ms ease-in-out`,\n    opacity: 0,\n};\ntype TransitionStyle = {\n    key: TransitionStatus;\n    value: {};\n};\nconst transitionStyles: TransitionStyle[] = [\n    { key: 'entering', value: { opacity: 1 } },\n    { key: 'entered', value: { opacity: 1 } },\n    { key: 'exiting', value: { opacity: 0 } },\n    { key: 'exited', value: { opacity: 0 } },\n];\n\ntype Question = {\n    category: string;\n    type: string;\n    difficulty: string;\n    question: string;\n    correct_answer: string;\n    incorrect_answers: string[];\n    options: string[];\n};\n\ntype Response = {\n    response_code: number;\n    results: Question[];\n};\n\nfunction Quiz() {\n    const { user } = useUser()!;\n    let location = useLocation();\n    let history = useHistory();\n    const [questions, setQuestions] = useState<Question[]>([]);\n    const [answers, setAnswers] = useState<string[]>(['']);\n    const [questionIndex, setQuestionIndex] = useState(0);\n    const [isFinish, setIsFinish] = useState<boolean>(false);\n    const [show, setShow] = React.useState(true);\n    const [direction, setDirection] = React.useState('');\n    const [time, setTime] = useState(10);\n    const handleClick = (dir: string) => {\n        if (\n            (dir === 'dec' && questionIndex === 0) ||\n            (dir === 'inc' && questionIndex === questions.length - 1)\n        )\n            return;\n        setShow(false);\n        setDirection(dir);\n    };\n    const onExited = () => {\n        setShow(true);\n        if (!isFinish) setTime(10);\n        if (direction === 'inc')\n            setQuestionIndex(\n                questionIndex === questions.length - 1\n                    ? questionIndex\n                    : questionIndex + 1,\n            );\n        else if (direction === 'dec')\n            setQuestionIndex(questionIndex === 0 ? 0 : questionIndex - 1);\n        setDirection('');\n    };\n\n    useEffect(() => {\n        const timerId = setTimeout(() => {\n            if (time === 0 && !isFinish) {\n                setIsFinish(true);\n                alert(\n                    `${user} \n                         have \n                        ${\n                            questions\n                                .map((question) => {\n                                    return question.correct_answer;\n                                })\n                                .filter((x) => answers.includes(x)).length\n                        }\n                         correct answer`,\n                );\n            } else if (time > 0) {\n                setTime(time - 1);\n            }\n        }, 1000);\n        return () => clearTimeout(timerId);\n    }, [time, answers, questions, isFinish, user]);\n\n    useEffect(() => {\n        const fetchData = async () => {\n            const response = await fetch(\n                'https://opentdb.com/api.php' + location.search,\n            );\n            const data: Response = await response.json();\n            data.results.forEach((result) => {\n                if (result.type === 'multiple') {\n                    result.options = result.incorrect_answers\n                        .concat(result.correct_answer)\n                        .sort(() => Math.random() - 0.5);\n                } else {\n                    result.options = ['True', 'False'];\n                }\n            });\n            setQuestions(data.results);\n        };\n        fetchData();\n    }, [location.search]);\n\n    const handleOptionClick = (e: React.MouseEvent<HTMLElement>) => {\n        if (isFinish) return;\n        if (questionIndex < questions.length - 1) setShow(false);\n        setDirection('inc');\n        setAnswers([\n            ...answers.slice(0, questionIndex),\n            e.currentTarget.innerText,\n            ...answers.slice(questionIndex + 1, answers.length),\n        ]);\n    };\n    const handleFinish = () => {\n        if (!isFinish) {\n            setIsFinish(true);\n            setTime(0);\n            alert(\n                `${user} have ${\n                    questions\n                        .map((question) => {\n                            return question.correct_answer;\n                        })\n                        .filter((answer, index) => answer === answers[index])\n                        .length\n                } correct answer`,\n            );\n        } else {\n            history.push('/quiz-app');\n        }\n    };\n\n    let questionOnPage = questions.map((question, index) => (\n        <React.Fragment key={index}>\n            <div className='flex flex-row items-center justify-between mb-3 bg-gray-900 text-white h-12 md:rounded-md'>\n                <div className='text-left pl-5'>\n                    {questionIndex + 1} / {questions.length}\n                </div>\n                <div className='ext-center'>{question.category}</div>\n                <div className='text-right w-10 pr-5'>{time}</div>\n            </div>\n            <div\n                key={index}\n                className='flex flex-col bg-gray-200 p-3 my-3 rounded-md h-48 text-lg text-center justify-center text-2xl font-extrabold text-gray-800'\n            >\n                {he.decode(question.question)}\n            </div>\n            <div className='flex flex-col justify-between mb-3'>\n                {question.options.map((option, i) => (\n                    <QuestionOption\n                        key={i}\n                        text={option}\n                        selected={option === answers[questionIndex]}\n                        isTrue={isFinish && option === question.correct_answer}\n                        onClick={handleOptionClick}\n                    />\n                ))}\n            </div>\n        </React.Fragment>\n    ));\n\n    return (\n        <div className='flex flex-col min-h-screen md:justify-center md:w-1/2 mx-auto'>\n            <Transition in={show} timeout={duration} onExited={onExited}>\n                {(state) => (\n                    <div\n                        style={{\n                            ...defaultStyle,\n                            ...transitionStyles.filter(\n                                (transition) => transition.key === state,\n                            )[0].value,\n                        }}\n                    >\n                        {questionOnPage[questionIndex]}\n                    </div>\n                )}\n            </Transition>\n            <div className='flex flex-row justify-between items-center'>\n                <button\n                    type='button'\n                    className='w-1/3 flex-grow h-12 bg-gray-500 hover:bg-gray-400 md: rounded-md'\n                    onClick={() => handleClick('dec')}\n                >\n                    {'Previous'}\n                </button>\n                <button\n                    type='button'\n                    className='w-1/3 mx-1 flex-grow h-12 text-white bg-indigo-500 hover:bg-indigo-400 focus:shadow-outline-indigo focus:border-indigo-700 active:bg-indigo-700 md: rounded-md'\n                    onClick={handleFinish}\n                >\n                    {!isFinish ? 'Finish Quiz' : 'Restart Quiz'}\n                </button>\n                <button\n                    className='w-1/3 flex-grow h-12 bg-gray-500 hover:bg-gray-400 md: rounded-md'\n                    onClick={() => handleClick('inc')}\n                >\n                    {'Next'}\n                </button>\n            </div>\n        </div>\n    );\n}\n\nexport default Quiz;\n","import React from 'react';\nimport { BrowserRouter, Route, Redirect } from 'react-router-dom';\nimport Configuration from './views/Configuration';\nimport Quiz from './views/Quiz';\nimport UserContextProvider from './components/UserContext';\n\nfunction App() {\n    return (\n        <UserContextProvider>\n            <div className='min-h-screen'>\n                <div className='mx-auto bg-gray-100 max-w-screen-lg'>\n                    <BrowserRouter>\n                        <Route exact path='/'>\n                            <Redirect to='/quiz-app' />\n                        </Route>\n                        <Route exact path='/quiz-app'>\n                            <Configuration />\n                        </Route>\n                        <Route path='/quiz'>\n                            <Quiz />\n                        </Route>\n                    </BrowserRouter>\n                </div>\n            </div>\n        </UserContextProvider>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}