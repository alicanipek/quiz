{"version":3,"sources":["components/UserContext.tsx","components/Result.tsx","views/Configuration.tsx","components/Footer.tsx","components/QuestionHeader.tsx","components/QuestionOption.tsx","components/QuestionOptions.tsx","views/Quiz.tsx","App.tsx","index.tsx"],"names":["UserContext","React","createContext","undefined","UserContextProvider","children","useState","name","setName","Provider","value","user","setUser","s","useUser","useContext","Result","history","useHistory","params","URLSearchParams","useLocation","search","Fragment","className","get","type","onClick","push","Configuration","categories","setCategories","useForm","register","handleSubmit","errors","url","onSubmit","amount","category","difficulty","a","fetch","response","json","data","trivia_categories","fetchData","ref","required","max","clsx","onChange","e","target","map","key","id","Footer","handleClick","handleFinish","isFinish","QuestionHeader","questionIndex","totalQuestions","time","QuestionOption","text","selected","isTrue","he","decode","QuestionOptions","options","correct_answer","answer","option","i","defaultStyle","transition","opacity","transitionStyles","Quiz","location","questions","setQuestions","answers","setAnswers","setQuestionIndex","setIsFinish","show","setShow","direction","setDirection","setTime","useEffect","timerId","setTimeout","question","filter","x","includes","length","clearTimeout","results","forEach","result","incorrect_answers","concat","sort","Math","random","handleOptionClick","slice","currentTarget","innerText","questionOnPage","index","Transition","in","timeout","onExited","state","style","dir","App","exact","path","to","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.79debbe2.chunk.js","sourcesContent":["import React, { ReactNode } from 'react';\n\ntype UserContextProps = {\n    user: string;\n    setUser: (n: string) => void;\n};\n\nexport const UserContext = React.createContext<UserContextProps | undefined>(\n    undefined,\n);\n\nexport default function UserContextProvider({\n    children,\n}: {\n    children: ReactNode;\n}) {\n    const [name, setName] = React.useState('');\n    const setNameFunc = (s: string) => {\n        setName(s);\n    };\n    return (\n        <UserContext.Provider value={{ user: name, setUser: setNameFunc }}>\n            {children}\n        </UserContext.Provider>\n    );\n}\nexport const useUser = () => React.useContext(UserContext);\n","import React from 'react';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport { useUser } from './UserContext';\n\nexport default function Result() {\n    const { user } = useUser()!;\n    let history = useHistory();\n    let params = new URLSearchParams(useLocation().search);\n    return (\n        <React.Fragment>\n            <div className='flex flex-col min-h-screen justify-center md:w-1/2 mx-auto px-2'>\n                <div className='flex flex-col bg-gray-200 p-3 my-3 rounded-md h-48 text-lg text-center justify-center font-extrabold text-gray-800'>\n                    {user} has {params.get('correct')}\n                    {params.get('correct') === '1'\n                        ? ' correct answer'\n                        : ' correct answers'}\n                </div>\n                <div className='flex flex-col justify-between mb-3'>\n                    <button\n                        type='button'\n                        className='flex-grow w-full h-12 text-white bg-indigo-500 hover:bg-indigo-400 focus:shadow-outline-indigo focus:border-indigo-700 active:bg-indigo-700 md: rounded-md'\n                        onClick={() => history.push('/quiz-app')}\n                    >\n                        {'Restart Quiz'}\n                    </button>\n                </div>\n            </div>\n        </React.Fragment>\n    );\n}\n","import clsx from 'clsx';\nimport * as React from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useHistory } from 'react-router-dom';\nimport { useUser } from '../components/UserContext';\n\ntype FormData = {\n    name: string;\n    amount: string;\n    category: string;\n    difficulty: string;\n    type: string;\n};\n\ntype Category = {\n    id: number;\n    name: 'string';\n};\n\ntype Response = {\n    trivia_categories: Category[];\n};\nexport default function Configuration() {\n    const { user, setUser } = useUser()!;\n    let history = useHistory();\n    const [categories, setCategories] = React.useState<Category[]>([]);\n    const { register, handleSubmit, errors } = useForm<FormData>();\n    let url = '/quiz?amount=';\n    const onSubmit = handleSubmit(({ amount, category, difficulty, type }) => {\n        url += amount;\n        url += category !== 'any' ? '&category=' + category : '';\n        url += difficulty !== 'any' ? '&difficulty=' + difficulty : '';\n        url += type !== 'any' ? '&type=' + type : '';\n        history.push(url);\n    });\n    React.useEffect(() => {\n        const fetchData = async () => {\n            const response = await fetch(\n                'https://opentdb.com/api_category.php',\n            );\n            const data: Response = await response.json();\n            setCategories(data.trivia_categories);\n        };\n        fetchData();\n    }, []);\n    return (\n        <div className='flex flex-col min-h-screen justify-center md:w-1/2 mx-auto px-2'>\n            <div className='py-5 text-center'>Quiz App</div>\n            <form className='grid grid-cols-1 row-gap-3' onSubmit={onSubmit}>\n                <label>Your Name</label>\n                <input\n                    name='name'\n                    ref={register({ required: true, max: 50 })}\n                    type='text'\n                    className={clsx(\n                        'border border-black border-solid px-3 py-4 h-12 rounded-md text-base',\n                        errors.name &&\n                            'border-red-300 focus:border-red-600 focus:shadow-outline-red',\n                    )}\n                    value={user}\n                    onChange={(e) => setUser(e.target.value)}\n                />\n                <label>Number of Questions</label>\n                <input\n                    name='amount'\n                    ref={register({ required: true, max: 50 })}\n                    type='number'\n                    className={clsx(\n                        'border border-black border-solid px-3 py-4 h-12 rounded-md text-base',\n                        errors.amount &&\n                            'border-red-300 focus:border-red-600 focus:shadow-outline-red',\n                    )}\n                />\n                <label>Category</label>\n                <select\n                    name='category'\n                    className='border border-black border-solid px-3 py-2 h-12 rounded-md text-base'\n                    ref={register}\n                >\n                    <option value='any'>Any Category</option>\n                    {categories.map((category) => (\n                        <option key={category.id} value={category.id}>\n                            {category.name}\n                        </option>\n                    ))}\n                </select>\n                <label>Difficulty</label>\n                <select\n                    name='difficulty'\n                    className='border border-black border-solid px-3 py-2 h-12 rounded-md text-base'\n                    ref={register}\n                >\n                    <option value='any'>Any Difficulty</option>\n                    <option value='easy'>Easy</option>\n                    <option value='medium'>Medium</option>\n                    <option value='hard'>Hard</option>\n                </select>\n                <label>Type</label>\n                <select\n                    name='type'\n                    className='border border-black border-solid px-3 py-2 h-12 rounded-md text-base'\n                    ref={register}\n                >\n                    <option value='any'>Any Type</option>\n                    <option value='multiple'>Multiple Choice</option>\n                    <option value='boolean'>True / False</option>\n                </select>\n                <button\n                    type='submit'\n                    className='bg-indigo-600 hover:bg-indigo-500 focus:shadow-outline-indigo focus:border-indigo-700 active:bg-indigo-700 py-2 h-12 rounded-md text-white'\n                >\n                    Start\n                </button>\n            </form>\n        </div>\n    );\n}\n","import React from 'react';\n\ninterface FooterProps {\n    handleClick: (dir: string) => void;\n    handleFinish: () => void;\n    isFinish: boolean;\n}\n\nexport default function Footer({\n    handleClick,\n    handleFinish,\n    isFinish,\n}: FooterProps) {\n    return (\n        <div className='flex flex-row justify-between items-center'>\n            <button\n                type='button'\n                className='w-1/3 flex-grow h-12 bg-gray-500 hover:bg-gray-400 md: rounded-md'\n                onClick={() => handleClick('dec')}\n            >\n                {'Previous'}\n            </button>\n            <button\n                type='button'\n                className='w-1/3 mx-1 flex-grow h-12 text-white bg-indigo-500 hover:bg-indigo-400 focus:shadow-outline-indigo focus:border-indigo-700 active:bg-indigo-700 md: rounded-md'\n                onClick={handleFinish}\n            >\n                {!isFinish ? 'Finish Quiz' : 'Restart Quiz'}\n            </button>\n            <button\n                className='w-1/3 flex-grow h-12 bg-gray-500 hover:bg-gray-400 md: rounded-md'\n                onClick={() => handleClick('inc')}\n            >\n                {'Next'}\n            </button>\n        </div>\n    );\n}\n","import React from 'react';\n\ninterface QuestionHeaderProps {\n    questionIndex: number;\n    totalQuestions: number;\n    category: string;\n    time: number;\n}\n\nexport default function QuestionHeader({\n    questionIndex,\n    totalQuestions,\n    category,\n    time,\n}: QuestionHeaderProps) {\n    return (\n        <div className='flex flex-row items-center justify-between mb-3 bg-gray-900 text-white h-12 md:rounded-md'>\n            <div className='text-left pl-5'>\n                {questionIndex} / {totalQuestions}\n            </div>\n            <div className='text-center'>{category}</div>\n            <div className='text-right w-10 pr-5'>{time}</div>\n        </div>\n    );\n}\n","import React, { ReactElement } from 'react';\nimport clsx from 'clsx';\nimport he from 'he';\n\ninterface Props {\n    text: string;\n    selected: boolean;\n    isTrue: boolean;\n    onClick: (event: React.MouseEvent<HTMLElement, MouseEvent>) => void;\n}\n\nexport default function QuestionOption({\n    text,\n    selected,\n    isTrue,\n    onClick,\n}: Props): ReactElement {\n    return (\n        <button\n            onClick={onClick}\n            className={clsx(\n                `flex-1 flex-grow text-left bg-gray-300 rounded-md my-1 ${\n                    !selected && !isTrue && 'hover:bg-gray-200'\n                } py-3 pl-6`,\n                isTrue && selected && 'bg-green-300',\n                isTrue && !selected && 'bg-red-300',\n                !isTrue && selected && 'bg-blue-300',\n            )}\n        >\n            <span>{he.decode(text)}</span>\n        </button>\n    );\n}\n","import React from 'react';\nimport QuestionOption from './QuestionOption';\n\ninterface QuestionOptionProps {\n    options: string[];\n    answer: string;\n    correct_answer: string;\n    isFinish: boolean;\n    onClick: (e: React.MouseEvent<HTMLElement>) => void;\n}\n\nexport default function QuestionOptions({\n    options,\n    isFinish,\n    onClick,\n    correct_answer,\n    answer,\n}: QuestionOptionProps) {\n    return (\n        <div className='flex flex-col justify-between mb-3'>\n            {options.map((option, i) => (\n                <QuestionOption\n                    key={i}\n                    text={option}\n                    selected={option === answer}\n                    isTrue={isFinish && option === correct_answer}\n                    onClick={onClick}\n                />\n            ))}\n        </div>\n    );\n}\n","import he from 'he';\nimport React, { useEffect, useState } from 'react';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport { Transition } from 'react-transition-group';\nimport { TransitionStatus } from 'react-transition-group/Transition';\nimport Footer from '../components/Footer';\nimport QuestionHeader from '../components/QuestionHeader';\nimport QuestionOptions from '../components/QuestionOptions';\n\nconst duration = 200;\n\nconst defaultStyle = {\n    transition: `opacity ${duration}ms ease-in-out`,\n    opacity: 0,\n};\ntype TransitionStyle = {\n    key: TransitionStatus;\n    value: {};\n};\nconst transitionStyles: TransitionStyle[] = [\n    { key: 'entering', value: { opacity: 1 } },\n    { key: 'entered', value: { opacity: 1 } },\n    { key: 'exiting', value: { opacity: 0 } },\n    { key: 'exited', value: { opacity: 0 } },\n];\n\ntype Question = {\n    category: string;\n    type: string;\n    difficulty: string;\n    question: string;\n    correct_answer: string;\n    incorrect_answers: string[];\n    options: string[];\n    time: number;\n};\n\ntype Response = {\n    response_code: number;\n    results: Question[];\n};\n\nfunction Quiz() {\n    let location = useLocation();\n    let history = useHistory();\n    const [questions, setQuestions] = useState<Question[]>([]);\n    const [answers, setAnswers] = useState<string[]>(['']);\n    const [questionIndex, setQuestionIndex] = useState(0);\n    const [isFinish, setIsFinish] = useState<boolean>(false);\n    const [show, setShow] = React.useState(true);\n    const [direction, setDirection] = React.useState('');\n    const [time, setTime] = useState(90);\n    const handleClick = (dir: string) => {\n        if (\n            (dir === 'dec' && questionIndex === 0) ||\n            (dir === 'inc' && questionIndex === questions.length - 1)\n        )\n            return;\n        setShow(false);\n        setDirection(dir);\n    };\n    const onExited = () => {\n        setShow(true);\n        if (!isFinish) setTime(90);\n        if (direction === 'inc')\n            setQuestionIndex(\n                questionIndex === questions.length - 1\n                    ? questionIndex\n                    : questionIndex + 1,\n            );\n        else if (direction === 'dec')\n            setQuestionIndex(questionIndex === 0 ? 0 : questionIndex - 1);\n        setDirection('');\n    };\n\n    useEffect(() => {\n        const timerId = setTimeout(() => {\n            if (questions[questionIndex].time === 0 && !isFinish) {\n                setIsFinish(true);\n                history.push(\n                    '/result?correct=' +\n                        questions\n                            .map((question) => {\n                                return question.correct_answer;\n                            })\n                            .filter((x) => answers.includes(x)).length,\n                );\n            } else if (questions[questionIndex].time > 0) {\n                questions[questionIndex].time =\n                    questions[questionIndex].time - 1;\n                setTime(questions[questionIndex].time);\n            }\n        }, 1000);\n        return () => clearTimeout(timerId);\n    }, [answers, time, questions, isFinish, history, questionIndex]);\n\n    useEffect(() => {\n        const fetchData = async () => {\n            const response = await fetch(\n                'https://opentdb.com/api.php' + location.search,\n            );\n            const data: Response = await response.json();\n            data.results.forEach((result) => {\n                if (result.type === 'multiple') {\n                    result.options = result.incorrect_answers\n                        .concat(result.correct_answer)\n                        .sort(() => Math.random() - 0.5);\n                    result.time = 90;\n                } else {\n                    result.options = ['True', 'False'];\n                    result.time = 90;\n                }\n            });\n            setQuestions(data.results);\n        };\n        fetchData();\n    }, [location.search]);\n\n    const handleOptionClick = (e: React.MouseEvent<HTMLElement>) => {\n        if (isFinish) return;\n        if (questionIndex < questions.length - 1) setShow(false);\n        setDirection('inc');\n        setAnswers([\n            ...answers.slice(0, questionIndex),\n            e.currentTarget.innerText,\n            ...answers.slice(questionIndex + 1, answers.length),\n        ]);\n    };\n    const handleFinish = () => {\n        if (!isFinish) {\n            setIsFinish(true);\n            setTime(0);\n\n            history.push(\n                '/result?correct=' +\n                    questions\n                        .map((question) => {\n                            return question.correct_answer;\n                        })\n                        .filter((answer, index) => answer === answers[index])\n                        .length,\n            );\n        } else {\n            history.push('/quiz-app');\n        }\n    };\n\n    let questionOnPage = questions.map((question, index) => (\n        <React.Fragment key={index}>\n            <QuestionHeader\n                questionIndex={questionIndex + 1}\n                totalQuestions={questions.length}\n                category={question.category}\n                time={question.time}\n            />\n            <div\n                key={index}\n                className='flex flex-col bg-gray-200 p-3 my-3 rounded-md h-48 text-lg text-center justify-center font-extrabold text-gray-800'\n            >\n                {he.decode(question.question)}\n            </div>\n            <QuestionOptions\n                answer={answers[questionIndex]}\n                correct_answer={question.correct_answer}\n                options={question.options}\n                onClick={handleOptionClick}\n                isFinish={isFinish}\n            />\n        </React.Fragment>\n    ));\n\n    return (\n        <div className='flex flex-col min-h-screen md:justify-center md:w-1/2 mx-auto'>\n            <Transition in={show} timeout={duration} onExited={onExited}>\n                {(state) => (\n                    <div\n                        style={{\n                            ...defaultStyle,\n                            ...transitionStyles.filter(\n                                (transition) => transition.key === state,\n                            )[0].value,\n                        }}\n                    >\n                        {questionOnPage[questionIndex]}\n                    </div>\n                )}\n            </Transition>\n            <Footer\n                handleClick={handleClick}\n                handleFinish={handleFinish}\n                isFinish={isFinish}\n            />\n        </div>\n    );\n}\n\nexport default Quiz;\n","import React from 'react';\nimport { BrowserRouter, Redirect, Route } from 'react-router-dom';\nimport Result from './components/Result';\nimport UserContextProvider from './components/UserContext';\nimport Configuration from './views/Configuration';\nimport Quiz from './views/Quiz';\n\nfunction App() {\n    return (\n        <UserContextProvider>\n            <div className='min-h-screen'>\n                <div className='mx-auto bg-gray-100 max-w-screen-lg'>\n                    <BrowserRouter>\n                        <Route exact path='/'>\n                            <Redirect to='/quiz-app' />\n                        </Route>\n                        <Route exact path='/quiz-app'>\n                            <Configuration />\n                        </Route>\n                        <Route path='/result'>\n                            <Result />\n                        </Route>\n                        <Route path='/quiz'>\n                            <Quiz />\n                        </Route>\n                    </BrowserRouter>\n                </div>\n            </div>\n        </UserContextProvider>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}